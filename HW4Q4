def verifySorted(A):
    for i in range(len(A)-1):
        if A[i] > A[i+1]:
            print(f"A[{i}]=={A[i]} is greater than A[{i+1}]=={A[i+1]}")
            return
    print("Array is sorted!")

def pickPivot(A):
    return(A[-1])

def partitionInPlace(A,pivotvalue):
    e = len(A)-1
    i = 0
    for j in range(0, len(A)-1):
        if A[j] < pivotvalue:
            A[i], A[j] = A[j], A[i]
            i = i + 1
    A[i], A[e] = A[e], A[i]
    return (i)

def quicksort(A):
    if len(A) < 3:
        if len(A) >= 2:
            if A[0] > A[1]:
                A[0], A[1] = A[1], A[0]
        return
    levitating = partitionInPlace(A,pickPivot(A))
    front = A[0: levitating]
    quicksort(front)
    back = A[levitating + 1: len(A)]
    quicksort(back)
    
def main():
    import numpy.random
    numpy.random.seed(0)
    A = numpy.random.randint(0,100,100)
    quicksort(A)
    print(A)
    verifySorted(A)
    print("Hello")
    
if __name__ == "__main__":
    main()
